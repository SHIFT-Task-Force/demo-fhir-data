#!/bin/bash
# A command line tool to compile FSH files and deploy resources to a FHIR server

# File paths and constants
BUNDLE_GENERATOR="bundle-generator.js"
INPUT_DIR="input"
FSH_DIR="${INPUT_DIR}/fsh"
BUNDLE_FSH="${FSH_DIR}/auto-bundle.fsh"
BUNDLE_FILE="fsh-generated/resources/Bundle-auto-compiled-bundle.json"
FSH_GENERATED_DIR="fsh-generated"
SUSHI_CONFIG="sushi-config.yaml"
SUSHI_CMD="sushi ."

# Usage messages
USAGE_POST="Usage: ./fhir-tools.sh post SERVER_URL"
USAGE_DEPLOY="Usage: ./fhir-tools.sh deploy SERVER_URL"
USAGE_HELP="Run './fhir-tools.sh help' for usage information"

# Script name for error messages
SCRIPT_NAME=$(basename "$0")

# Color codes for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'

# Print section header
section() {
  echo -e "\n${BLUE}==== $1 ====${NC}"
}

# Print success message
success() {
  echo -e "${GREEN}✓ $1${NC}"
}

# Print info message
info() {
  echo -e "${YELLOW}ℹ $1${NC}"
}

# Print warning message
warning() {
  echo -e "${ORANGE}⚠ $1${NC}"
}

# Print error message
error() {
  echo -e "${RED}✗ $1${NC}"
}

# Show help
show_help() {
  echo "FHIR Resources Tools"
  echo ""
  echo "Usage: ./${SCRIPT_NAME} COMMAND [OPTIONS]"
  echo ""
  echo "Commands:"
  echo "  bundle                   Generate a bundle from FSH files"
  echo "  sushi                    Run sushi to compile all FSH files"
  echo "  post SERVER_URL          Post the bundle to a FHIR server (SERVER_URL is required)"
  echo "  clean                    Remove generated files (compiled JSON files)"
  echo "  deploy SERVER_URL        Compile and post resources to a FHIR server (SERVER_URL is required)"
  echo "  help                     Show this help message"
  echo ""
  echo "Examples:"
  echo "  ./${SCRIPT_NAME} bundle                          # Generate bundle file"
  echo "  ./${SCRIPT_NAME} sushi                           # Compile FSH files with SUSHI"
  echo "  ./${SCRIPT_NAME} post http://example.com/fhir    # Post to a FHIR server"
  echo "  ./${SCRIPT_NAME} deploy http://example.com/fhir  # Full deployment to a FHIRserver"
  echo ""
}

# Generate auto-bundle from all FSH files
generate_bundle() {
  section "Generating Bundle"
  node ${BUNDLE_GENERATOR}
  
  info "SUSHI will automatically generate a bundle when compiling FSH files"
  info "The bundle will be created at: ${BUNDLE_FILE}"
  
  run_sushi
  
  # Check if the bundle was created
  if [ -f "${BUNDLE_FILE}" ]; then
    success "Bundle generated successfully"
  else
    error "Bundle generation failed"
    exit 1
  fi
}

# Compile FSH files with Sushi
run_sushi() {
  section "Compiling FSH Files with Sushi"
  ${SUSHI_CMD}
  if [ $? -eq 0 ]; then
    success "FSH files compiled successfully"
  else
    error "Error compiling FSH files"
    exit 1
  fi
}

# Post bundle to FHIR server
post_bundle() {
  local server_url=$1
  
  # Check if server URL is provided
  if [ -z "$server_url" ]; then
    error "No server URL provided"
    echo "${USAGE_POST}"
    exit 1
  fi
  
  section "Posting Bundle to $server_url"
  
  # Check if bundle file exists (should be generated by SUSHI with our config)
  if [ -f "${BUNDLE_FILE}" ]; then
    info "Posting bundle to $server_url..."
    
    # Post the bundle and capture just the HTTP status code
    status_code=$(curl -s -X POST -H "Content-Type: application/fhir+json" \
      -d @"${BUNDLE_FILE}" \
      -o /dev/null \
      -w "%{http_code}" \
      "$server_url")
    
    # Check if the status code indicates success (2xx)
    if [[ $status_code =~ ^2[0-9][0-9]$ ]]; then
      success "Bundle posted successfully (Status: $status_code)"
    else
      error "Failed to post bundle (Status: $status_code)"
      exit 1
    fi
    
  else
    error "Bundle file not found at ${BUNDLE_FILE}"
    echo "Make sure SUSHI is configured to generate a bundle (check ${SUSHI_CONFIG})"
    exit 1
  fi
}

# Clean generated files
clean_files() {
  section "Cleaning Generated Files"
  
  if [ -d "./${FSH_GENERATED_DIR}" ]; then
    rm -rf "./${FSH_GENERATED_DIR}"
    success "Removed ${FSH_GENERATED_DIR} directory"
  else
    info "${FSH_GENERATED_DIR} directory not found, nothing to remove"
  fi
  
  # Remove the auto-bundle file if it exists
  if [ -f "${BUNDLE_FSH}" ]; then
    rm "${BUNDLE_FSH}"
    success "Removed auto-bundle file at ${BUNDLE_FSH}"
  fi
  
  success "Cleanup completed"
}

# Full process
deploy() {
  local server_url=$1
  
  # Check if server URL is provided
  if [ -z "$server_url" ]; then
    error "No server URL provided"
    echo "${USAGE_DEPLOY}"
    exit 1
  fi
  
  # Clean previous files
  clean_files
  
  # Generate bundle
  generate_bundle

  run_sushi
  
  # Post bundle
  post_bundle "$server_url"
  
  section "Deployment Completed"
  success "Full deployment completed successfully!"
}

# Commands
case "$1" in
  bundle)
    generate_bundle
    ;;
  sushi)
    run_sushi
    ;;
  post)
    post_bundle "$2"
    ;;
  clean)
    clean_files
    ;;
  deploy)
    deploy "$2"
    ;;
  help|--help|-h)
    show_help
    ;;
  "")
    # No command provided, show help
    show_help
    exit 1
    ;;
  *)
    error "Unknown command: $1"
    echo "${USAGE_HELP}"
    exit 1
    ;;
esac

exit 0 