#!/bin/bash
# A command line tool to compile FSH files and deploy resources to a FHIR server

# File paths and constants
BUNDLE_GENERATOR="bundle-generator.js"
MEDPLUM_SCRIPT="medplum.js"
INPUT_DIR="input"
FSH_DIR="${INPUT_DIR}/fsh"
BUNDLE_FSH="${FSH_DIR}/auto-bundle.fsh"
BUNDLE_FILE="fsh-generated/resources/Bundle-auto-compiled-bundle.json"
FSH_GENERATED_DIR="fsh-generated"
SUSHI_CONFIG="sushi-config.yaml"
SUSHI_CMD="sushi -s ."

# Usage messages
USAGE_POST="Usage: ./fhir-tools.sh post SERVER_URL"
USAGE_DEPLOY="Usage: ./fhir-tools.sh deploy SERVER_URL"
USAGE_MEDPLUM="Usage: ./fhir-tools.sh medplum [BUNDLE_ID] [GENERATE_DELETE]"
USAGE_HELP="Run './fhir-tools.sh help' for usage information"

# Script name for error messages
SCRIPT_NAME=$(basename "$0")

# Color codes for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'

# Print section header
section() {
  echo -e "\n${BLUE}==== $1 ====${NC}"
}

# Print success message
success() {
  echo -e "${GREEN}✓ $1${NC}"
}

# Print info message
info() {
  echo -e "${YELLOW}ℹ $1${NC}"
}

# Print warning message
warning() {
  echo -e "${ORANGE}⚠ $1${NC}"
}

# Print error message
error() {
  echo -e "${RED}✗ $1${NC}"
}

# Show help
show_help() {
  echo "FHIR Resources Tools"
  echo ""
  echo "Usage: ./${SCRIPT_NAME} COMMAND [OPTIONS]"
  echo ""
  echo "Commands:"
  echo "  bundle                   Generate a bundle from FSH files"
  echo "  sushi                    Run sushi to compile all FSH files"
  echo "  post SERVER_URL          Post the bundle to a FHIR server (SERVER_URL is required)"
  echo "  clean                    Remove generated files (compiled JSON files)"
  echo "  deploy SERVER_URL        Compile and post resources to a FHIR server (SERVER_URL is required)"
  echo "  medplum [BUNDLE_ID]      Generate both transaction and deletion bundles for Medplum compatibility (defaults to auto-compiled-bundle)"
  echo "  help                     Show this help message"
  echo ""
  echo "Examples:"
  echo "  ./${SCRIPT_NAME} bundle                          # Generate bundle file"
  echo "  ./${SCRIPT_NAME} sushi                           # Compile FSH files with SUSHI"
  echo "  ./${SCRIPT_NAME} post http://example.com/fhir    # Post to a FHIR server"
  echo "  ./${SCRIPT_NAME} deploy http://example.com/fhir  # Full deployment to a FHIR server"
  echo "  ./${SCRIPT_NAME} medplum                         # Generate transaction and deletion bundles for Medplum"
  echo "  ./${SCRIPT_NAME} medplum auto-compiled-bundle false  # Generate only transaction bundle for Medplum (no deletion bundle)"
  echo ""
}

# Generate auto-bundle from all FSH files
generate_bundle() {
  section "Generating Bundle"
  node ${BUNDLE_GENERATOR}
  
  info "SUSHI will automatically generate a bundle when compiling FSH files"
  info "The bundle will be created at: ${BUNDLE_FILE}"
  
  run_sushi
  
  # Check if the bundle was created
  if [ -f "${BUNDLE_FILE}" ]; then
    success "Bundle generated successfully"
  else
    error "Bundle generation failed"
    exit 1
  fi
}

# Compile FSH files with Sushi
run_sushi() {
  section "Compiling FSH Files with Sushi"
  ${SUSHI_CMD}
  if [ $? -eq 0 ]; then
    success "FSH files compiled successfully"
  else
    error "Error compiling FSH files"
    exit 1
  fi
}

# Post bundle to FHIR server
post_bundle() {
  local server_url=$1
  
  # Check if server URL is provided
  if [ -z "$server_url" ]; then
    error "No server URL provided"
    echo "${USAGE_POST}"
    exit 1
  fi
  
  section "Posting Bundle to $server_url"
  
  # Check if bundle file exists (should be generated by SUSHI with our config)
  if [ -f "${BUNDLE_FILE}" ]; then
    info "Posting bundle to $server_url..."
    
    # Post the bundle and capture just the HTTP status code
    status_code=$(curl -s -X POST -H "Content-Type: application/fhir+json" \
      -d @"${BUNDLE_FILE}" \
      -o /dev/null \
      -w "%{http_code}" \
      "$server_url")
    
    # Check if the status code indicates success (2xx)
    if [[ $status_code =~ ^2[0-9][0-9]$ ]]; then
      success "Bundle posted successfully (Status: $status_code)"
    else
      error "Failed to post bundle (Status: $status_code)"
      exit 1
    fi
    
  else
    error "Bundle file not found at ${BUNDLE_FILE}"
    echo "Make sure SUSHI is configured to generate a bundle (check ${SUSHI_CONFIG})"
    exit 1
  fi
}

# Clean generated files
clean_files() {
  section "Cleaning Generated Files"
  
  if [ -d "./${FSH_GENERATED_DIR}" ]; then
    rm -rf "./${FSH_GENERATED_DIR}"
    success "Removed ${FSH_GENERATED_DIR} directory"
  else
    info "${FSH_GENERATED_DIR} directory not found, nothing to remove"
  fi
  
  # Remove the auto-bundle file if it exists
  if [ -f "${BUNDLE_FSH}" ]; then
    rm "${BUNDLE_FSH}"
    success "Removed auto-bundle file at ${BUNDLE_FSH}"
  fi
  
  success "Cleanup completed"
}

# Full process
deploy() {
  local server_url=$1
  
  # Check if server URL is provided
  if [ -z "$server_url" ]; then
    error "No server URL provided"
    echo "${USAGE_DEPLOY}"
    exit 1
  fi
  
  # Clean previous files
  clean_files
  
  # Generate bundle
  generate_bundle

  run_sushi
  
  # Post bundle
  post_bundle "$server_url"
  
  section "Deployment Completed"
  success "Full deployment completed successfully!"
}

# Run medplum script to modify a bundle for medplum compatibility
run_medplum() {
  local bundle_id=$1
  # Always generate delete bundle, ignore argument

  if [ -z "$bundle_id" ]; then
    bundle_id="auto-compiled-bundle"
    info "No bundle ID provided, using default: $bundle_id"
  fi

  section "Modifying Bundle for Medplum Compatibility (all environments)"

  if [ ! -f "${MEDPLUM_SCRIPT}" ]; then
    error "Medplum script not found at ${MEDPLUM_SCRIPT}"
    exit 1
  fi

  bundle_path="${FSH_GENERATED_DIR}/resources/Bundle-${bundle_id}.json"
  if [ ! -f "$bundle_path" ]; then
    warning "Bundle file not found at $bundle_path"
    info "Attempting to generate bundle first..."
    generate_bundle
    if [ ! -f "$bundle_path" ]; then
      error "Failed to generate bundle. Bundle file still not found at $bundle_path"
      exit 1
    else
      success "Bundle successfully generated"
    fi
  fi

  # Find all .env and .env.* files, but ignore .env.example
  local env_files=( $(find . -maxdepth 1 -type f \( -name ".env" -o -name ".env.*" \) ! -name ".env.example" | sort) )
  if [ ${#env_files[@]} -eq 0 ]; then
    warning "No .env or .env.* files found. Only generating default Medplum bundle."
    env_files=(".env")
  fi

  for env_file_path in "${env_files[@]}"; do
    local env_file_name=$(basename "$env_file_path")
    local suffix=""
    if [[ "$env_file_name" == ".env" ]]; then
      suffix=""
    elif [[ "$env_file_name" == .env.* ]]; then
      suffix="-$(echo $env_file_name | cut -d'.' -f3-)"
    fi
    local env_display_name=${suffix#-}
    if [ -z "$env_display_name" ]; then env_display_name="default"; fi
    info "Processing Medplum bundle for environment: $env_display_name (using $env_file_path)"
    node ${MEDPLUM_SCRIPT} "$bundle_id" "$suffix" "$env_file_path"
    if [ $? -eq 0 ]; then
      success "Bundle successfully modified for Medplum compatibility ($env_display_name)"
      info "Medplum Bundle: ${FSH_GENERATED_DIR}/resources/Bundle-${bundle_id}-medplum${suffix}.json"
    else
      error "Failed to modify bundle for Medplum compatibility ($env_display_name)"
      continue
    fi
  done

  # Create a single deletion bundle for the default Medplum bundle (no suffix)
  section "Creating Deletion Bundle for Medplum (default)"
  local medplum_bundle_id_for_delete="${bundle_id}-medplum"
  local medplum_bundle_path_for_delete="${FSH_GENERATED_DIR}/resources/Bundle-${medplum_bundle_id_for_delete}.json"
  if [ ! -f "delete-bundle-generator.js" ]; then
    error "Delete bundle generator script not found at delete-bundle-generator.js"
    return
  fi
  if [ ! -f "$medplum_bundle_path_for_delete" ]; then
    error "Medplum bundle file not found at $medplum_bundle_path_for_delete (expected input for deletion bundle)"
    return
  fi
  node delete-bundle-generator.js "$medplum_bundle_id_for_delete"
  if [ $? -eq 0 ]; then
    success "Deletion bundle successfully created for default"
    info "Deletion bundle: ${FSH_GENERATED_DIR}/resources/Bundle-${medplum_bundle_id_for_delete}-delete.json"
  else
    error "Failed to create deletion bundle for default"
  fi
}

# Commands
case "$1" in
  bundle)
    generate_bundle
    ;;
  sushi)
    run_sushi
    ;;
  post)
    post_bundle "$2"
    ;;
  clean)
    clean_files
    ;;
  deploy)
    deploy "$2"
    ;;
  medplum)
    run_medplum "$2" "$3"
    ;;
  help|--help|-h)
    show_help
    ;;
  "")
    # No command provided, show help
    show_help
    exit 1
    ;;
  *)
    error "Unknown command: $1"
    echo "${USAGE_HELP}"
    exit 1
    ;;
esac

exit 0